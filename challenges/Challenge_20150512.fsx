(**
# .NET Challenge for May 12, 2015

## Prompt
Last week I didn’t specify a format for my challenge solutions that was a mistake. The official format for submissions is a Github Gist. Please post a link to your submission in a comment on this post.

For this week’s challenge, create a function that will accept a dictionary with the following keys and values:


```json
{
  "author_name": "Robert Jordan",
  "book_title": "Knife of Dreams",
  "series": "The Wheel of Time, Book 11",
  "publisher": "Tor Fantasy",
  "published_date": "November 28, 2006"
}
```

The function should return a query string that meets the following criteria:

 - It includes all of the values from the dictionary as key value pairs
 - It also includes a `timestamp` parameter that is the milliseconds since the Unix epoch
 - It also includes a `signature` parameter. The signature parameter should be generated by:
     - Assembling the query string with each key in alphabetical order (e.g. `author_name=Robert%20Jordan&book_title=Knife%20of%20Dreams&published_date=November%2028%2C%202006&publisher=Tor%20Fantasy&series=The%20Wheel%20of%20Time%2C%20Book%2011&timestamp=0`)
     - Append the following string `"1234MySuperSecretKey4321"`
     - Generate a hash from the string using the SHA-1 hash function. The resulting hash is the signature.
*)

(**
## Coding
*)

(**
### Step One: Let's setup inputs
*)
let input = (Seq.sort [ "author_name", "Robert Jordan";
                        "book_title", "Knife of Dreams";
                        "series", "The Wheel of Time, Book 11";
                        "publisher", "Tor Fantasy";
                        "published_date", "November 28, 2006";
                        "timestamp", (System.DateTime.Now - System.DateTime(1970, 1, 1)).TotalMilliseconds 
                         |> int64
                         |> fun ms -> ms.ToString()
])
let secret = "1234MySuperSecretKey4321"

(**
### Step Two: Shorthand methods because legibility
*)
let encode (x:string) = System.Web.HttpUtility.UrlEncode(x).Replace("+", "%20")
let hash (x:string) = 
    System.Text.Encoding.UTF8.GetBytes(x)                     // Get the bytes from the string
    |> System.Security.Cryptography.SHA1.Create().ComputeHash // Compute the hash
    |> System.Convert.ToBase64String                          // Convert it to a base 64 string
    |> encode                                                 // Encode it for HTTP transfer
(**
### Step Three: Do the thing
*)
input
    |> Seq.map (fun (k, v) -> sprintf "%s=%s" k (encode v)) // Turn tuples into A=B strings
    |> String.concat "&"                    // Concatenate those strings using &
    |> fun s -> 
      let qs = s                            // Keep the query string for later
      sprintf "%s%s" s secret               // Append secret
    |> hash                                 // Compute the hash
    |> sprintf "%s&signature=%s" qs         // Assemble the string
    |> printfn "%s"                         // Display it

(** 
## Result

`author_name=Robert%20Jordan&book_title=Knife%20of%20Dreams&published_date=November%2028%2c%202006&publisher=Tor%20Fantasy&series=The%20Wheel%20of%20Time%2c%20Book%2011&timestamp=1431458313749&signature=28f93f495513120a667707534718bba5a00f4fa9`
*)